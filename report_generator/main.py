# report_generator/main.py

from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import os, io
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from reportlab.platypus import SimpleDocTemplate, Paragraph, Image, Spacer, ListFlowable
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import letter
from sqlalchemy import select
from shared.db import AsyncSession
from shared.models import Price        
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.schema import HumanMessage, SystemMessage
from dotenv import load_dotenv
from datetime import datetime

app = FastAPI(title="Report Generator Service (Formatted Report)")

load_dotenv()
GEMINI_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_KEY:
    raise RuntimeError("Missing GEMINI_API_KEY")

temp_llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", api_key=GEMINI_KEY, temperature=0.2)

@app.post("/generate_report")
async def generate_report():
    async with AsyncSession() as session:
        result = await session.execute(select(Price).order_by(Price.timestamp))
        rows = result.scalars().all()
    df = pd.DataFrame([{"symbol": r.symbol, "timestamp": r.timestamp, "close": r.close} for r in rows])
    df["timestamp"] = pd.to_datetime(df["timestamp"])
    plt.figure(figsize=(10, 5))
    for sym in df['symbol'].unique():
        sub = df[df['symbol']==sym].sort_values('timestamp')
        plt.plot(sub['timestamp'], sub['close'], label=sym, linewidth=2)

    plt.title("Closing Prices Over Time")
    plt.xlabel("Date")
    plt.ylabel("Price ($)")
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.legend()
    ax = plt.gca()
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
    plt.gcf().autofmt_xdate()
    plt.tight_layout()

    plot_buf = io.BytesIO()
    plt.savefig(plot_buf, format='png', dpi=300)
    plt.close()
    plot_buf.seek(0)

    system_prompt = (
        "You are a financial analysis AI agent that generates professional reports.\n"
        "## REPORT STRUCTURE:\n"
        "1. Executive Summary\n"
        "2. Market Analysis\n"
        "3. Technical Indicators\n"
        "4. Price Predictions\n"
        "5. Risk Analysis\n"
        "6. Data Sources\n"
        "Use Markdown headings (##) and bullet points."
    )
    snippet = "\n".join(
        f"{r.symbol} at {r.timestamp.isoformat()}: close={r.close:.2f}"
        for r in rows[-10:]
    )
    human_prompt = f"Recent data points (last 10):\n{snippet}\nGenerate the report markdown."
    messages = [SystemMessage(content=system_prompt), HumanMessage(content=human_prompt)]
    resp = temp_llm(messages)
    report_md = resp.content

    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            title="Financial Analysis Report",
                            author="Analysis System")
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='TitleCenter', parent=styles['Title'], alignment=1))
    styles.add(ParagraphStyle(name='Heading2Center', parent=styles['Heading2'], alignment=1))
    styles.add(ParagraphStyle(name='BulletIndent', parent=styles['BodyText'], leftIndent=12))
    styles.add(ParagraphStyle(name='Footer', parent=styles['Normal'], fontName='Helvetica-Oblique', fontSize=8, alignment=1))

    story = [Paragraph("Financial Analysis Report", styles['TitleCenter']), Spacer(1, 24)]
    in_list, list_items = False, []
    for line in report_md.splitlines():
        line = line.strip()
        if line.startswith('## '):
            if in_list:
                story.append(ListFlowable(list_items, bulletType='bullet'))
                list_items, in_list = [], False
            story.extend([Spacer(1,12), Paragraph(line[3:], styles['Heading2Center']), Spacer(1,12)])
        elif line.startswith('- '):
            in_list = True
            list_items.append(Paragraph(line[2:], styles['BulletIndent']))
        elif '|' in line and not line.startswith('|---'):
            if in_list:
                story.append(ListFlowable(list_items, bulletType='bullet'))
                list_items, in_list = [], False
            story.append(Paragraph(line.replace('|','    '), styles['BodyText']))
        elif line:
            if in_list:
                story.append(ListFlowable(list_items, bulletType='bullet'))
                list_items, in_list = [], False
            story.append(Paragraph(line, styles['BodyText']))
    if in_list:
        story.append(ListFlowable(list_items, bulletType='bullet'))

    story.extend([
        Spacer(1,24),
        Paragraph("Closing Price Trend", styles['Heading2Center']),
        Spacer(1,12),
        Image(io.BytesIO(plot_buf.getvalue()), width=500, height=250),
        Spacer(1,24),
        Paragraph("Generated by Financial Analysis System", styles['Footer']),
        Paragraph(datetime.now().strftime("%B %d, %Y"), styles['Footer'])
    ])

    doc.build(story)
    buffer.seek(0)

    return StreamingResponse(
        buffer,
        media_type="application/pdf",
        headers={"Content-Disposition": "attachment; filename=financial_report.pdf"}
    )
